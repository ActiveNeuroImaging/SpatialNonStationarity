
rm(list=ls())

library(maps)
library(ggplot2)
library(sf)
library(terra)
library(tidyterra) # raster plotting
library(tidyr)
library(scales)
library(dplyr)
library(INLA)
library(inlabru)
library(fmesher)

colsc <- function(...) {
  scale_fill_gradientn(
    colours = rev(RColorBrewer::brewer.pal(11, "RdYlBu")),
    limits = range(..., na.rm = TRUE)
  )
}

set.seed(41)
Coords=read.table('/Users/robleech/Dropbox/BrainSmash/FlatMaps/SimDataLocsXYZ.txt',header = FALSE,sep=" ")*200

#Coords=read.table('/Users/robleech/Dropbox/BrainSmash/FlatMaps/SimDataLocsSph.txt',header = FALSE,sep=" ")
Sig1=read.csv('/Users/robleech/Dropbox/BrainSmash/FlatMaps/NS_SimData1v2.txt',header = FALSE)

Sig3=read.csv('/Users/robleech/Dropbox/BrainSmash/FlatMaps/NS_SimData2v2.txt',header = FALSE)

NSVect<-read.csv('/Users/robleech/Dropbox/BrainSmash/FlatMaps/NSVect.txt',header = FALSE)
NSVect=NSVect$V1-mean(NSVect$V1)
NSVect2<-read.csv('/Users/robleech/Dropbox/BrainSmash/FlatMaps/NSVect.txt',header = FALSE)
NSVect2=NSVect2$V1-mean(NSVect2$V1)


names(Coords)<-list("V1","V2","V3")
#names(Coords)<-list("V1","V2")


#Coords <- subset(Coords, select = -c(l3))
names(Sig1)<-list("Sig1")

names(Sig3)<-list("Sig3")



train<-df

test<-df





sampled_df <- df

sampled_df2 <- df

sampled_df3 <- df

coords=cbind(sampled_df$V1,sampled_df$V2,sampled_df$V3)

#mesh<-fm_rcdt_2d(coords,globe=0)
mesh<-fm_rcdt_2d(coords)




sigma0<-sd(Sig1$Sig1)*sd(Sig1$Sig1)
size <- min(c(diff(range(mesh$loc[, 1])), diff(range(mesh$loc[, 2]))))
range0 <- size/5
kappa0 <- sqrt(8)/range0
tau0 <- 1/(sqrt(4 * pi) * kappa0 * sigma0)
matern <- inla.spde2.matern(mesh, B.tau = cbind(log(tau0), -1, +1), B.kappa = cbind(log(kappa0), 
  0, -1), theta.prior.mean = c(0, 0), theta.prior.prec = c(0.1, 1))

#matern <-inla.spde2.pcmatern(mesh,prior.sigma = c(1, 0.5),prior.range = c(0.1, 0.01))


mydata <- sf::st_as_sf(
  sampled_df2,
  coords = c("V1", "V2","V3")
)

#ggplot() + gg(mesh_fine) +   gg(mydata, aes(col = Sig1))

#met<-(mydata$Sig1-mean(mydata$Sig1))/sd(mydata$Sig1)

#cmp <- Sig3 ~ -1 +  Met(geometry, weights = Sig1, model = matern) + field(geometry, model = matern)

#cmp1 <- Sig1 ~  -1 + Met(geometry, weights = Sig3, model = matern) + field(geometry, model = matern)
#fit1 <- bru(cmp1, mydata, family = "gaussian")
###,options = list(control.compute = list(cpo = TRUE,config = TRUE)))

cmp2 <- Sig1 ~ -1 + Sig3 + field(geometry, model = matern)

fit2 <- bru(cmp2, mydata, family = "gaussian")

cmp3 <- Sig1 ~ -1 + field(geometry, model = matern)

fit3 <- bru(cmp3, mydata, family = "gaussian")




cmp4 <- Sig1 ~  Sig3 + Intercept(1)

fit4 <- bru(cmp4, mydata, family = "gaussian")



nu <- 1 
alpha <- nu + 2 / 2

# log(kappa)
logkappa0 <- log(8 * nu) / 2

# log(tau); in two lines to keep code width within range
logtau0 <- (lgamma(nu) - lgamma(alpha) -1 * log(4 * pi)) / 2 
logtau0 <- logtau0 - logkappa0

# SPDE model
maternNS <- inla.spde2.matern(mesh, 
	B.tau = cbind(logtau0, -1, nu, nu * NSVect), 
	B.kappa = cbind(logkappa0, 0, -1, -1 * NSVect),
	theta.prior.mean = rep(0, 3), 
	theta.prior.prec = rep(1, 3))

#maternNS <- inla.spde2.matern(mesh, 
#	B.tau = cbind(logtau0, -1, nu, nu * mesh$loc[,1]), 
#	B.kappa = cbind(logkappa0, 0, -1, -1 * mesh$loc[,1]),
#	theta.prior.mean = rep(0, 3), 
#	theta.prior.prec = rep(1, 3))



cmp5 <- Sig1 ~  -1 + Sig3 + field(geometry, model = maternNS)
fit5 <- bru(cmp5, mydata, family = "gaussian")

cmp6 <- Sig1 ~   1 + field(geometry, model = maternNS)
fit6 <- bru(cmp6, mydata, family = "gaussian")

#cmp7 <- Sig1 ~  -1 + field(geometry, model = maternNS_2)
#fit7 <- bru(cmp7, mydata, family = "gaussian")

#cmp8 <- Sig1 ~  -1 + Sig3 + field(geometry, model = maternNS_2)
#fit8 <- bru(cmp8, mydata, family = "gaussian")


deltaIC(fit2,fit3,fit4,fit5,fit6)#, fit7, fit8,criterion="DIC")

